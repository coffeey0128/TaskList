{{define "api_test.tmpl"}}package api_test

import (
   "{{.ProjectName}}/models/apireq"
   "{{.ProjectName}}/models/apires"
	"encoding/json"
	"fmt"
	"bytes"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestListAll{{.StructName}}(t *testing.T) {
	t.Run("List All {{.StructName}}", func(t *testing.T) {
		path := fmt.Sprintf("/{{.APIRoute}}?name_like=%s&page=%d&per_page=%d", "", 1, 10)
		request, _ := http.NewRequest(http.MethodGet, path, nil)
		response := httptest.NewRecorder()
		route.ServeHTTP(response, request)

		assert.Equal(t, 200, response.Code)

		var result apires.List{{.StructName}}
		bodyBytes := response.Body.Bytes()
		fmt.Printf("%s", bodyBytes)
		err := json.Unmarshal(bodyBytes, &result)
		if err != nil {
			panic(err)
		}
	})
}

func TestGet{{.StructName}}Detail(t *testing.T) {
	t.Run("Get {{.StructName}} detail", func(t *testing.T) {
		path := fmt.Sprintf("/{{.APIRoute}}/%d", 1)
		request, _ := http.NewRequest(http.MethodGet, path, nil)
		response := httptest.NewRecorder()
		route.ServeHTTP(response, request)

		assert.Equal(t, 200, response.Code)

		var result apires.{{.StructName}}
		bodyBytes := response.Body.Bytes()
		fmt.Printf("%s", bodyBytes)
		err := json.Unmarshal(bodyBytes, &result)
		if err != nil {
			panic(err)
		}
	})
}

func TestCreate{{.StructName}}(t *testing.T) {
   tests := []struct {
		name    string
		body    *apireq.Create{{.StructName}}
		response     string
		responseCode int
	}{
		{
			name:    "test 1",
			body:    &apireq.Create{{.StructName}}{}, // 必須填值
			response:     "{}",
			responseCode: 200,
		},
	}
	for _, test := range tests {
      t.Run(fmt.Sprintf("Create {{.StructName}} %s",test.name), func(t *testing.T) {
            body, err := json.Marshal(test.body)
            if err != nil {
               t.Fatal(err)
            }
            path := fmt.Sprintf("/{{.APIRoute}}")
            request, _ := http.NewRequest(http.MethodPost, path, bytes.NewBuffer(body))
            response := httptest.NewRecorder()
            request.Header.Add("Content-type", "application/json")
            route.ServeHTTP(response, request)

            assert.Equal(t, test.responseCode, response.Code)
            assert.Equal(t, test.response, response.Body.String())
      })
   }
}

func TestUpdate{{.StructName}}(t *testing.T) {
   tests := []struct {
		name    string
		body    *apireq.Update{{.StructName}}
		response     string
		responseCode int
	}{
		{
			name:    "test 1",
			body:    &apireq.Update{{.StructName}}{}, // 必須填值
			response:     "{}",
			responseCode: 200,
		},
	}
	for _, test := range tests {
      t.Run(fmt.Sprintf("Update {{.StructName}} %s",test.name), func(t *testing.T) {
            body, err := json.Marshal(test.body)
            if err != nil {
               t.Fatal(err)
            }
            path := fmt.Sprintf("/{{.APIRoute}}/%d",1)
            request, _ := http.NewRequest(http.MethodPut, path, bytes.NewBuffer(body))
            response := httptest.NewRecorder()
            request.Header.Add("Content-type", "application/json")
            route.ServeHTTP(response, request)
            assert.Equal(t, test.responseCode, response.Code)
            assert.Equal(t, test.response, response.Body.String())
      })
   }
}

func TestDelete{{.StructName}}(t *testing.T) {
   tests := []struct {
		name    string
		response     string
		responseCode int
	}{
		{
			name:    "test 1",
			response:     "{}",
			responseCode: 200,
		},
	}
	for _, test := range tests {
      t.Run(fmt.Sprintf("Delete {{.StructName}} %s",test.name), func(t *testing.T) {
            path := fmt.Sprintf("/{{.APIRoute}}/%d",1)
            request, _ := http.NewRequest(http.MethodDelete, path, nil)
            response := httptest.NewRecorder()
            request.Header.Add("Content-type", "application/json")
            route.ServeHTTP(response, request)
            assert.Equal(t, test.responseCode, response.Code)
            assert.Equal(t, test.response, response.Body.String())
      })
   }
}
{{end}}